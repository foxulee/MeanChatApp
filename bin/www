#!/usr/bin/env node

/**
 * Module dependencies.
 */
const path = require('path');
const fs = require('fs');
const app = require('../app');
const debug = require('debug')('MEAN-stack-authentication:server');
const http = require('http');
const https = require('https');
const socketIO = require('socket.io');
const {
  Users
} = require('../api/helpers/UsersClass');
const {
  Global
} = require('../api/helpers/Global');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

// const server = http.createServer(app);


/**
 * Create HTTPS server.
 */
const server = https.createServer({
  key: fs.readFileSync(path.join(__dirname, '../client/ssl') + '/server.key'),
  cert: fs.readFileSync(path.join(__dirname, '../client/ssl') + '/server.crt'),
  requestCert: false,
  rejectUnauthorized: false
}, app);


/**
 * Create Socket.io.
 */
const io = socketIO(server, {
  transports: ['websocket', 'htmlfile', 'xhr-multipart', 'xhr-polling']
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Allow io/Users is able to be used in group-chat.js
 */
require('../socket/group-chat')(io, Users);
require('../socket/friend-request')(io);
require('../socket/global')(io, Global);
require('../socket/private-chat')(io, Users);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}